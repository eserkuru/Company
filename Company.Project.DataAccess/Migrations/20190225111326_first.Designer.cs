// <auto-generated />
using System;
using Company.Project.DataAccess.Concrete.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Company.Project.DataAccess.Migrations
{
    [DbContext(typeof(ProjectContext))]
    [Migration("20190225111326_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Company.Core.Entities.Address.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("CountryCode");

                    b.Property<Guid?>("CountryId");

                    b.Property<string>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Company.Core.Entities.Address.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Company.Core.Entities.Address.Town", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CityCode");

                    b.Property<Guid?>("CityId");

                    b.Property<string>("Code");

                    b.Property<string>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Town");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Accounting.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AccountTypeId");

                    b.Property<decimal>("Balance");

                    b.Property<Guid?>("BranchId");

                    b.Property<string>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<Guid?>("CurrencyId");

                    b.Property<decimal>("InTotalAmount");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("TaxNumber");

                    b.Property<string>("TaxOffice");

                    b.Property<decimal>("TotalAmountOut");

                    b.Property<string>("TradeName");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Accounting.AccountAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AccountId");

                    b.Property<Guid?>("CityId");

                    b.Property<Guid?>("CountryId");

                    b.Property<string>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("PostalCode");

                    b.Property<Guid?>("TownId");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("TownId");

                    b.ToTable("AccountAddresses");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Accounting.AccountContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AccountId");

                    b.Property<string>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Email");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("PhoneNumberType");

                    b.Property<int>("PhoneNumberTypeId");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountContacts");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Accounting.AccountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("TypeCode");

                    b.Property<string>("TypeName");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Accounting.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AccountId");

                    b.Property<decimal>("AmountOut");

                    b.Property<string>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<decimal>("InAmount");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("TransactionTime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Accounting.Transfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AccountId");

                    b.Property<decimal>("Amount");

                    b.Property<string>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid?>("TargetAccountId");

                    b.Property<DateTime>("TransferTime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("TargetAccountId");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Admin.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CityId");

                    b.Property<Guid?>("CountryId");

                    b.Property<string>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<Guid?>("OrganisationId");

                    b.Property<string>("PostalCode");

                    b.Property<Guid?>("TownId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("TownId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Admin.BranchContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchId");

                    b.Property<string>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Email");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("PhoneNumberType");

                    b.Property<int>("PhoneNumberTypeId");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("BranchContacts");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Admin.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ClosingDate");

                    b.Property<string>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("CustomerGuid");

                    b.Property<int>("CustomerNumber");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Owner");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Admin.Configuration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ClientId");

                    b.Property<string>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("DatabasePassword");

                    b.Property<string>("DatabaseServer");

                    b.Property<string>("DatabaseUsername");

                    b.Property<string>("DomainPassword");

                    b.Property<string>("DomainServer");

                    b.Property<string>("DomainUsername");

                    b.Property<string>("InitialName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Admin.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ClientId");

                    b.Property<string>("Code");

                    b.Property<string>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("ExchangeRate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<string>("Symbol");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Admin.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ClientId");

                    b.Property<string>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Admin.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ClientId");

                    b.Property<string>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EventTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Admin.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ClientId");

                    b.Property<string>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Admin.Organisation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CRSNumber");

                    b.Property<Guid?>("ClientId");

                    b.Property<string>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LogoURL");

                    b.Property<string>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<string>("ShortName");

                    b.Property<string>("TaxNumber");

                    b.Property<string>("TaxOffice");

                    b.Property<string>("TradeName");

                    b.Property<string>("TradeNumber");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.HumanResources.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchId");

                    b.Property<DateTime>("ContractEndDate");

                    b.Property<DateTime>("ContractStartDate");

                    b.Property<string>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<Guid?>("CurrencyId");

                    b.Property<string>("FirstName");

                    b.Property<string>("FixedSalary");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<string>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("NationalityId");

                    b.Property<Guid?>("OrganisationId");

                    b.Property<Guid?>("UnitsId");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("UnitsId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.HumanResources.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchId");

                    b.Property<string>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<Guid?>("OrganisationId");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Inventory.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Inventory.BrandModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BrandId");

                    b.Property<string>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("BrandModels");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Inventory.Fixture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BrandId");

                    b.Property<Guid?>("BrandModelId");

                    b.Property<string>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid?>("OrganisationId");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("BrandModelId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Fixtures");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Invoicing.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid?>("OrganisationId");

                    b.Property<string>("Title");

                    b.Property<decimal>("TotalPriceExclTax");

                    b.Property<decimal>("TotalPriceInclTax");

                    b.Property<decimal>("TotalUnitPriceExclTax");

                    b.Property<decimal>("TotalUnitPriceInclTax");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Invoicing.InvoiceAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CityId");

                    b.Property<Guid?>("CountryId");

                    b.Property<string>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<Guid?>("InvoiceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("PostalCode");

                    b.Property<Guid?>("TownId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("TownId");

                    b.ToTable("InvoiceAddresses");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Invoicing.InvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Created");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<Guid?>("InvoiceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.Property<decimal>("PriceExclTax");

                    b.Property<decimal>("PriceInclTax");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("UnitPriceExclTax");

                    b.Property<decimal>("UnitPriceInclTax");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("Company.Core.Entities.Address.City", b =>
                {
                    b.HasOne("Company.Core.Entities.Address.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("Company.Core.Entities.Address.Town", b =>
                {
                    b.HasOne("Company.Core.Entities.Address.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Accounting.Account", b =>
                {
                    b.HasOne("Company.Project.Entities.Concrete.Accounting.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId");

                    b.HasOne("Company.Project.Entities.Concrete.Admin.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("Company.Project.Entities.Concrete.Admin.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Accounting.AccountAddress", b =>
                {
                    b.HasOne("Company.Project.Entities.Concrete.Accounting.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("Company.Core.Entities.Address.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Company.Core.Entities.Address.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Company.Core.Entities.Address.Town", "Town")
                        .WithMany()
                        .HasForeignKey("TownId");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Accounting.AccountContact", b =>
                {
                    b.HasOne("Company.Project.Entities.Concrete.Accounting.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Accounting.Transaction", b =>
                {
                    b.HasOne("Company.Project.Entities.Concrete.Accounting.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Accounting.Transfer", b =>
                {
                    b.HasOne("Company.Project.Entities.Concrete.Accounting.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("Company.Project.Entities.Concrete.Accounting.Account", "TargetAccount")
                        .WithMany()
                        .HasForeignKey("TargetAccountId");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Admin.Branch", b =>
                {
                    b.HasOne("Company.Core.Entities.Address.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Company.Core.Entities.Address.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Company.Project.Entities.Concrete.Admin.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId");

                    b.HasOne("Company.Core.Entities.Address.Town", "Town")
                        .WithMany()
                        .HasForeignKey("TownId");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Admin.BranchContact", b =>
                {
                    b.HasOne("Company.Project.Entities.Concrete.Admin.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Admin.Configuration", b =>
                {
                    b.HasOne("Company.Project.Entities.Concrete.Admin.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Admin.Currency", b =>
                {
                    b.HasOne("Company.Project.Entities.Concrete.Admin.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Admin.Document", b =>
                {
                    b.HasOne("Company.Project.Entities.Concrete.Admin.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Admin.Event", b =>
                {
                    b.HasOne("Company.Project.Entities.Concrete.Admin.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Admin.Module", b =>
                {
                    b.HasOne("Company.Project.Entities.Concrete.Admin.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Admin.Organisation", b =>
                {
                    b.HasOne("Company.Project.Entities.Concrete.Admin.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.HumanResources.Employee", b =>
                {
                    b.HasOne("Company.Project.Entities.Concrete.Admin.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("Company.Project.Entities.Concrete.Admin.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Company.Project.Entities.Concrete.Admin.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId");

                    b.HasOne("Company.Project.Entities.Concrete.HumanResources.Unit", "Units")
                        .WithMany()
                        .HasForeignKey("UnitsId");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.HumanResources.Unit", b =>
                {
                    b.HasOne("Company.Project.Entities.Concrete.Admin.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("Company.Project.Entities.Concrete.Admin.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Inventory.BrandModel", b =>
                {
                    b.HasOne("Company.Project.Entities.Concrete.Inventory.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Inventory.Fixture", b =>
                {
                    b.HasOne("Company.Project.Entities.Concrete.Inventory.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("Company.Project.Entities.Concrete.Inventory.BrandModel", "BrandModel")
                        .WithMany()
                        .HasForeignKey("BrandModelId");

                    b.HasOne("Company.Project.Entities.Concrete.Admin.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Invoicing.Invoice", b =>
                {
                    b.HasOne("Company.Project.Entities.Concrete.Admin.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Invoicing.InvoiceAddress", b =>
                {
                    b.HasOne("Company.Core.Entities.Address.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Company.Core.Entities.Address.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Company.Project.Entities.Concrete.Invoicing.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId");

                    b.HasOne("Company.Core.Entities.Address.Town", "Town")
                        .WithMany()
                        .HasForeignKey("TownId");
                });

            modelBuilder.Entity("Company.Project.Entities.Concrete.Invoicing.InvoiceItem", b =>
                {
                    b.HasOne("Company.Project.Entities.Concrete.Invoicing.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId");
                });
#pragma warning restore 612, 618
        }
    }
}
